#include <string>
#include <cstdio>
#include <thread>
#include <chrono>

#include <opencog/util/Config.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/cogserver/server/CogServer.h>
#include <opencog/cogserver/server/Request.h>

using std::string;

using namespace opencog;

class PyEvalUTest :  public CxxTest::TestSuite
{

private:
    AtomSpacePtr atomspace;

public:

    PyEvalUTest()
    {
        logger().set_level(Logger::DEBUG);
        logger().set_print_to_stdout_flag(true);

        // Create an atomspace for testing
        atomspace = createAtomSpace();

        // Initialize the cogserver with the test atomspace
        cogserver(atomspace);

        // Load Python module if available
        config().set("MODULES", "libpy-shell.so");
        cogserver().loadModules();
    }

    ~PyEvalUTest()
    {
        // Clean up
        if (!CxxTest::TestTracker::tracker().suiteFailed())
            std::remove(logger().get_filename().c_str());
    }

    void setUp() {
    }

    void tearDown() {
    }

    void testCogServerInitialization()
    {
        // Test that the CogServer is properly initialized
        TS_ASSERT_EQUALS(cogserver().getAtomSpace(), atomspace);

        // Test that we can get the server's atomspace
        AtomSpacePtr server_as = cogserver().getAtomSpace();
        TS_ASSERT_DIFFERS(server_as, nullptr);
        TS_ASSERT_EQUALS(server_as, atomspace);
    }

    void testCogServerCanCreatePyEvalRequest()
    {
        // Test that the CogServer can create py-eval requests
        // This verifies the Python module was loaded into the CogServer
        Request* pyEvalRequest = cogserver().createRequest("py-eval");
        TS_ASSERT_DIFFERS(pyEvalRequest, (Request*) NULL);

        if (pyEvalRequest != NULL) {
            TS_TRACE("CogServer successfully loaded Python module");
            delete pyEvalRequest;
        } else {
            TS_SKIP("Python module not available in CogServer");
        }
    }

    void testCogServerCanCreatePyShellRequest()
    {
        // Test that the CogServer can create py shell requests
        Request* pyShellRequest = cogserver().createRequest("py");
        TS_ASSERT_DIFFERS(pyShellRequest, (Request*) NULL);

        if (pyShellRequest != NULL) {
            TS_TRACE("CogServer can create Python shell requests");
            delete pyShellRequest;
        } else {
            TS_SKIP("Python shell not available in CogServer");
        }
    }

    void testCogServerProcessesPyEvalRequest()
    {
        // Test that CogServer can process a py-eval request
        Request* req = cogserver().createRequest("py-eval");
        if (req == NULL) {
            TS_SKIP("py-eval request not available");
            return;
        }

        // Add a simple Python expression
        req->addParameter("test_cogserver_var = 123");

        // Push request to CogServer's queue
        cogserver().pushRequest(req);

        // Process the request through CogServer
        cogserver().runLoopStep();

        // If we got here without crashing, the CogServer processed the request
        TS_ASSERT(true);
    }

    void testCogServerHandlesMultiplePyEvalRequests()
    {
        // Test that CogServer can handle multiple py-eval requests in sequence
        Request* req1 = cogserver().createRequest("py-eval");
        if (req1 == NULL) {
            TS_SKIP("py-eval request not available");
            return;
        }

        // First request: set a variable
        req1->addParameter("cogserver_test_x = 10");
        cogserver().pushRequest(req1);
        cogserver().runLoopStep();

        // Second request: use the variable
        Request* req2 = cogserver().createRequest("py-eval");
        TS_ASSERT_DIFFERS(req2, (Request*) NULL);
        req2->addParameter("cogserver_test_y = cogserver_test_x * 2");
        cogserver().pushRequest(req2);
        cogserver().runLoopStep();

        // Third request: verify persistence
        Request* req3 = cogserver().createRequest("py-eval");
        TS_ASSERT_DIFFERS(req3, (Request*) NULL);
        req3->addParameter("cogserver_test_z = cogserver_test_x + cogserver_test_y");
        cogserver().pushRequest(req3);
        cogserver().runLoopStep();

        // If all requests were processed without crashing, test passes
        TS_ASSERT(true);
    }

    void testCogServerPyEvalWithComplexExpression()
    {
        // Test that CogServer can handle complex Python expressions
        Request* req = cogserver().createRequest("py-eval");
        if (req == NULL) {
            TS_SKIP("py-eval request not available");
            return;
        }

        // Add a complex Python expression with function definition
        req->addParameter("def cogserver_test_func(n): return n * n");
        cogserver().pushRequest(req);
        cogserver().runLoopStep();

        // Use the function in another request
        Request* req2 = cogserver().createRequest("py-eval");
        TS_ASSERT_DIFFERS(req2, (Request*) NULL);
        req2->addParameter("cogserver_result = cogserver_test_func(7)");
        cogserver().pushRequest(req2);
        cogserver().runLoopStep();

        // Verify the function was executed
        Request* req3 = cogserver().createRequest("py-eval");
        TS_ASSERT_DIFFERS(req3, (Request*) NULL);
        req3->addParameter("assert cogserver_result == 49");
        cogserver().pushRequest(req3);
        cogserver().runLoopStep();

        // If assertion didn't fail, test passes
        TS_ASSERT(true);
    }

    void testCogServerPyEvalWithImports()
    {
        // Test that CogServer py-eval can handle module imports
        Request* req = cogserver().createRequest("py-eval");
        if (req == NULL) {
            TS_SKIP("py-eval request not available");
            return;
        }

        // Import a standard library module through CogServer
        req->addParameter("import math");
        cogserver().pushRequest(req);
        cogserver().runLoopStep();

        // Use the imported module
        Request* req2 = cogserver().createRequest("py-eval");
        TS_ASSERT_DIFFERS(req2, (Request*) NULL);
        req2->addParameter("cogserver_pi = math.pi");
        cogserver().pushRequest(req2);
        cogserver().runLoopStep();

        // Verify the import worked
        Request* req3 = cogserver().createRequest("py-eval");
        TS_ASSERT_DIFFERS(req3, (Request*) NULL);
        req3->addParameter("assert cogserver_pi > 3.14 and cogserver_pi < 3.15");
        cogserver().pushRequest(req3);
        cogserver().runLoopStep();

        // If import and usage worked, test passes
        TS_ASSERT(true);
    }

    void testCogServerPyEvalAtomSpaceAccess()
    {
        // Test that Python code executed through CogServer can access the AtomSpace
        Request* req = cogserver().createRequest("py-eval");
        if (req == NULL) {
            TS_SKIP("py-eval request not available");
            return;
        }

        // Get initial size of atomspace
        int initial_size = atomspace->get_size();

        // Import AtomSpace modules through CogServer
        req->addParameter("from opencog.atomspace import AtomSpace, types");
        cogserver().pushRequest(req);
        cogserver().runLoopStep();

        // Get the server's atomspace
        Request* req2 = cogserver().createRequest("py-eval");
        TS_ASSERT_DIFFERS(req2, (Request*) NULL);
        req2->addParameter("from opencog.cogserver import get_server_atomspace");
        cogserver().pushRequest(req2);
        cogserver().runLoopStep();

        // Try to add a node to the atomspace
        Request* req3 = cogserver().createRequest("py-eval");
        TS_ASSERT_DIFFERS(req3, (Request*) NULL);
        req3->addParameter(
            "server_as = get_server_atomspace()\n"
            "if server_as:\n"
            "    cogserver_node = server_as.add_node(types.ConceptNode, 'CogServerTestNode')"
        );
        cogserver().pushRequest(req3);
        cogserver().runLoopStep();

        // Give it a moment to process
        std::this_thread::sleep_for(std::chrono::milliseconds(100));

        // Check if atomspace size increased
        int new_size = atomspace->get_size();
        // Note: This might not increase if get_server_atomspace() returns None
        // but the important thing is that the request was processed without crashing
        TS_ASSERT(new_size >= initial_size);
    }

    void testCogServerPyEvalErrorHandling()
    {
        // Test that CogServer handles Python errors gracefully
        Request* req = cogserver().createRequest("py-eval");
        if (req == NULL) {
            TS_SKIP("py-eval request not available");
            return;
        }

        // Send invalid Python syntax through CogServer
        req->addParameter("this is not valid python");
        cogserver().pushRequest(req);
        cogserver().runLoopStep();

        // CogServer should handle the error without crashing
        TS_ASSERT(true);

        // Test runtime error
        Request* req2 = cogserver().createRequest("py-eval");
        TS_ASSERT_DIFFERS(req2, (Request*) NULL);
        req2->addParameter("undefined_variable_12345");
        cogserver().pushRequest(req2);
        cogserver().runLoopStep();

        // CogServer should handle the NameError without crashing
        TS_ASSERT(true);
    }

    void testCogServerRequestQueueing()
    {
        // Test that CogServer can queue multiple requests
        Request* req1 = cogserver().createRequest("py-eval");
        Request* req2 = cogserver().createRequest("py-eval");
        Request* req3 = cogserver().createRequest("py-eval");

        if (req1 == NULL || req2 == NULL || req3 == NULL) {
            TS_SKIP("py-eval request not available");
            return;
        }

        // Queue multiple requests
        req1->addParameter("queue_test_a = 1");
        req2->addParameter("queue_test_b = 2");
        req3->addParameter("queue_test_c = queue_test_a + queue_test_b");

        cogserver().pushRequest(req1);
        cogserver().pushRequest(req2);
        cogserver().pushRequest(req3);

        // Process all queued requests
        cogserver().runLoopStep();
        cogserver().runLoopStep();
        cogserver().runLoopStep();

        // If all requests were processed, test passes
        TS_ASSERT(true);
    }

    void testModuleLoadedInCogServer()
    {
        // Test that the Python module is properly loaded in CogServer
        // The module should have been loaded in the constructor

        // Try to create both py and py-eval requests
        Request* pyReq = cogserver().createRequest("py");
        Request* pyEvalReq = cogserver().createRequest("py-eval");

        // At least py-eval should be available if module loaded
        TS_ASSERT_DIFFERS(pyEvalReq, (Request*) NULL);

        if (pyReq) delete pyReq;
        if (pyEvalReq) delete pyEvalReq;
    }
};
